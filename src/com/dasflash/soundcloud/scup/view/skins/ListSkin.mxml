<?xml version="1.0" encoding="utf-8"?>

<!--

	 Copyright 2010 (c) Dorian Roy - dorianroy.com

	 This file is part of Scup.

	 Scup is free software: you can redistribute it and/or modify
	 it under the terms of the GNU General Public License as published by
	 the Free Software Foundation, either version 3 of the License, or
	 (at your option) any later version.

	 Scup is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU General Public License for more details.

	 You should have received a copy of the GNU General Public License
	 along with Scup. If not, see <http://www.gnu.org/licenses/>.

-->

<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	minWidth="112"
	minHeight="40"
	alpha.disabled="0.5">

	<fx:Metadata>
    	[HostComponent("spark.components.List")]
    </fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.dasflash.soundcloud.scup.view.components.TrackListItemRenderer;

			import mx.collections.ArrayCollection;
			import mx.events.StateChangeEvent;

			import spark.components.supportClasses.ItemRenderer;
			import spark.events.RendererExistenceEvent;

			protected var renderers:ArrayCollection = new ArrayCollection();


			protected function rendererAddHandler(event:RendererExistenceEvent):void
			{
				event.renderer.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, rendererStateChangeHandler);

				renderers.addItem(event.renderer);
			}

			protected function rendererRemoveHandler(event:RendererExistenceEvent):void
			{
				event.renderer.removeEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, rendererStateChangeHandler);

				renderers.removeItemAt(renderers.getItemIndex(event.renderer));
			}

			protected function rendererStateChangeHandler(event:StateChangeEvent):void
			{
				if (event.newState == "expanded") {
					collapseAllItems(event.target as ItemRenderer);
				}
			}

			protected function collapseAllItems(exception:ItemRenderer=null):void
			{
				var l:uint = renderers.length;
				for (var i:uint = 0; i < l; ++i) {

					var renderer:TrackListItemRenderer = renderers.getItemAt(i) as TrackListItemRenderer;

					if (exception && renderer == exception) {
						continue;
					}
					renderer.expanded = false;
				}
			}

			/* Define the skin elements that should not be colorized.
			 For list, the skin itself is colorized but the individual parts are not. */
			static private const exclusions:Array = ["scroller"];

			/**
			 * @copy spark.skins.SparkSkin#colorizeExclusions
			 */
			override public function get colorizeExclusions():Array
			{
				return exclusions;
			}

			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];

			override public function get contentItems():Array
			{
				return contentFill
			}
			;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<!-- fill -->
	<!--- Defines the background appearance of the list-based component. -->
	<s:Rect id="background"
		visible="false">
		<s:fill>
			<s:SolidColor id="bgFill"
				color="0"/>
		</s:fill>
	</s:Rect>

	<!--- Defines the appearance of the list items, including their layout direction -->
	<s:Scroller width="100%"
		height="100%"
		id="scroller"
		focusEnabled="false"
		measuredSizeIncludesScrollBars="false"
		horizontalScrollPolicy="off">
		<s:DataGroup id="dataGroup"
			rendererAdd="rendererAddHandler(event)"
			rendererRemove="rendererRemoveHandler(event)">
			<s:layout>
				<s:VerticalLayout gap="0"
					horizontalAlign="contentJustify"/>
			</s:layout>
		</s:DataGroup>
	</s:Scroller>
</s:SparkSkin>
