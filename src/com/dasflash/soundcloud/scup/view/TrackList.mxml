<?xml version="1.0" encoding="utf-8"?>

<!--

	 Copyright 2010 (c) Dorian Roy - dorianroy.com

	 This file is part of Scup.

	 Scup is free software: you can redistribute it and/or modify
	 it under the terms of the GNU General Public License as published by
	 the Free Software Foundation, either version 3 of the License, or
	 (at your option) any later version.

	 Scup is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU General Public License for more details.

	 You should have received a copy of the GNU General Public License
	 along with Scup. If not, see <http://www.gnu.org/licenses/>.

-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:view="com.dasflash.soundcloud.scup.view.*"
	nativeDragEnter="nativeDragEnterHandler(event)"
	nativeDragDrop="nativeDragDropHandler(event)"
	click="list.selectedIndex=-1">

	<fx:Metadata>
		
		[Event(type="com.dasflash.soundcloud.scup.events.SetDataEvent", name="addFiles")]
		
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.dasflash.soundcloud.scup.events.SetDataEvent;
			import com.dasflash.soundcloud.scup.view.skins.AddButtonSkin;

			import flash.events.NativeDragEvent;

			import mx.collections.ICollectionView;
			import mx.events.DragEvent;

			import spark.components.supportClasses.ItemRenderer;

			[Bindable]
			[Inject(source="setData.title")]
			public var setTitle:String;

			[Bindable]
			[Inject(source="setData.trackCollection", twoWay="true")]
			public var tracks:ICollectionView;


			protected function nativeDragEnterHandler(event:NativeDragEvent):void
			{
				if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {

					list.dropEnabled = false;

					var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;

					for each (var file:File in files) {

						// limit to .ogg, .mp3, .mp4 .flac, .aac, .wav(e) .aif(f) .m4a
						switch (file.extension.toLowerCase()) {
							case "ogg":
								break;
							case "mp3":
								break;
							case "mp4":
								break;
							case "flac":
								break;
							case "aac":
								break;
							case "wav":
								break;
							case "wave":
								break;
							case "aif":
								break;
							case "aiff":
								break;
							case "m4a":
								break;

							// if none of the file extensions is met, return
							default:
								return;
						}
					}

					var iobject:* = flash.display.InteractiveObject(this);
					NativeDragManager.acceptDragDrop(iobject);
				}
			}

			protected function nativeDragDropHandler(event:NativeDragEvent):void
			{
				var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;

				if (files) {
					var setDataEvent:SetDataEvent = new SetDataEvent(SetDataEvent.ADD_FILES);
					setDataEvent.files = files;
					dispatchEvent(setDataEvent);
				}
			}

			protected function dragStartHandler(event:DragEvent):void
			{
				list.dropEnabled = true;

				// TODO close open tracklist item
			}

			public function browseFiles():void
			{
				var file:File = new File();

				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSelectHandler);

				// limit to .ogg, .mp3, .mp4 .flac, .aac, .wav(e) .aif(f) .m4a
				var soundFilesFilter:FileFilter = new FileFilter("Sound files", "*.ogg;*.mp3;*.mp4;*.flac;*.aac;*.wav;*.wave;*.aif;*.aiff;*.m4a");

				file.browseForOpenMultiple("Select Tracks", [soundFilesFilter]);
			}

			protected function fileSelectHandler(event:FileListEvent):void
			{
				var setDataEvent:SetDataEvent = new SetDataEvent(SetDataEvent.ADD_FILES);

				setDataEvent.files = event.files;

				dispatchEvent(setDataEvent);
			}
		]]>
	</fx:Script>


	<!--background fill-->
	<s:Rect width="100%"
		height="100%">
		<s:fill>
			<s:SolidColor color="#DCDCDF"/>
		</s:fill>
	</s:Rect>

	<!--top border-->
	<s:Line width="100%">
		<s:stroke>
			<mx:SolidColorStroke color="#AAABAD"
				caps="square"/>
		</s:stroke>
	</s:Line>

	<!--shadow-->
	<s:Rect width="100%"
		height="12"
		top="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#CBCBCF"/>
				<s:GradientEntry color="#DCDCDF"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<s:Group width="100%"
		height="100%"
		left="0"
		right="0"
		top="0"
		bottom="0">

		<!-- add button -->
		<s:Button top="8"
			right="20"
			click="browseFiles()"
			toolTip="Add tracks"
			skinClass="com.dasflash.soundcloud.scup.view.skins.AddButtonSkin"/>

		<s:Label text="Drag files here to upload"
			visible="{tracks.length==0}"
			styleName="dropHereLabelHead"
			includeInLayout="{tracks.length==0}"
			textAlign="center"
			width="100%"
			top="60"/>

		<s:Label text="Supported file types: AIFF, WAV, FLAC, OGG, MP3, AAC, MP4, M4A"
			visible="{tracks.length==0}"
			styleName="dropHereLabelSub"
			includeInLayout="{tracks.length==0}"
			textAlign="center"
			width="100%"
			top="90"/>

		<s:List id="list"
			dataProvider="{tracks}"
			width="100%"
			height="100%"
			top="35"
			dragStart="dragStartHandler(event)"
			dragEnabled="true"
			dragMoveEnabled="true"
			hasFocusableChildren="true"
			itemRenderer="com.dasflash.soundcloud.scup.view.components.TrackListItemRenderer"
			skinClass="com.dasflash.soundcloud.scup.view.skins.ListSkin"/>

	</s:Group>

</s:Group>
